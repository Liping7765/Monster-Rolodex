{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handlechange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filtered","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAEaA,EAAO,SAAAC,GAClB,OAAO,sBAAKC,UAAU,iBAAf,UAEL,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAEhF,mCAAOL,EAAMG,QAAQG,KAArB,OACA,4BAAIN,EAAMG,QAAQI,YCHTC,EAAW,SAACR,GACrB,OAAO,qBAAKC,UAAU,YAAf,SAEHD,EAAMS,SAASC,KAAK,SAAAP,GAAO,OAC3B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNdO,G,YAAY,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,YAAYC,EAAiB,EAAjBA,aACnC,OAAO,uBACPZ,UAAY,SACZa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCuCCG,E,kDAxCb,aAAc,IAAD,8BACX,gBAeFH,aAAe,SAAAI,GAAC,OAAI,EAAKC,SAAS,CAChCC,YAAaF,EAAEG,OAAOC,SAdtB,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALJ,E,qDAUb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAASkB,S,oBAOzC,WAAS,IAAD,EAC0BC,KAAKN,MAA9Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACXU,EAAWpB,EAASqB,QAAO,SAAA3B,GAAO,OACtCA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEW,YAAY,iBACZC,aAAce,KAAKf,eAGrB,cAAC,EAAD,CAAUJ,SAAYoB,W,GAnCZI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.62297008.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\nexport const Card = props => {\n  return <div className='card-container'>\n\n    <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\n        \n    <h2 > {props.monster.name} </h2>\n    <p>{props.monster.email}</p>\n    </div>;\n};","import React from 'react';\nimport './card-list.style.css';\nimport {Card} from '../card/card.component.jsx';\n\n\nexport const CardList = (props) => {\n    return <div className='card-list'>\n    {\n        props.monsters.map( monster =>\n        <Card key={monster.id} monster={monster}/>\n    )}\n\n    </div>;\n    \n};","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder,handlechange})=> {\n    return <input \n    className = 'search'\n    type='search'\n    placeholder={placeholder}\n    onChange={handlechange}\n    />\n};\n","import React, {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component.jsx';\nimport './App.css';\nimport {SearchBox} from './components/search-box/search-box.component.jsx';\n\nclass App extends Component{\n\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }    \n  \n  }\n\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\") //get date from the API \n    .then(response=>response.json()) // convert it into json file \n    .then(users => this.setState({monsters:users})) // set the state back with the json \n  }\n\n  handlechange = e => this.setState({\n    searchField: e.target.value});\n\n\n  render(){\n    const {monsters, searchField} = this.state;\n    const filtered = monsters.filter(monster=> \n      monster.name.toLowerCase().includes(searchField.toLowerCase()) );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n          placeholder='Search Monster' \n          handlechange={this.handlechange}\n          />\n\n        <CardList monsters = {filtered} />\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}